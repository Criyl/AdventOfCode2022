import pytest
from day_9 import generatePath, predict


@pytest.mark.parametrize(
    "steps, expectedhead, expectedtail",
    [
        (
            "R 4\nU 4\nL 3\nD 1\nR 4\nD 1\nL 5\nR 2",
            [
                (0, 0),
                (1, 0), (2, 0), (3, 0), (4, 0),
                (4, 1), (4, 2), (4, 3), (4, 4),
                (3, 4), (2, 4), (1, 4),
                (1, 3),
                (2, 3), (3, 3), (4, 3), (5, 3),
                (5, 2),
                (4, 2), (3, 2), (2, 2), (1, 2), (0, 2),
                (1, 2), (2, 2)
            ],
            [
                (0, 0), (0, 0),
                (1, 0), (2, 0), (3, 0), (3, 0),
                (4, 1), (4, 2), (4, 3), (4, 3),
                (3, 4), (2, 4), (2, 4),
                (2, 4),
                (2, 4), (3, 3), (4, 3), (4, 3),
                (4, 3),
                (4, 3), (3, 2), (2, 2), (1, 2), (1, 2),
                (1, 2)
            ]
        )
    ],
)
def test_path(steps, expectedhead, expectedtail):
    head, tail = generatePath(steps)

    assert head == expectedhead
    assert tail == expectedtail


@pytest.mark.parametrize(
    "head, tail, expected",
    (
        # R 4
        (((1, 0)), ((0, 0)), ((0, 0))),
        (((2, 0)), ((0, 0)), ((1, 0))),
        (((3, 0)), ((1, 0)), ((2, 0))),
        (((4, 0)), ((2, 0)), ((3, 0))),
        # U 4
        (((4, 1)), ((3, 0)), ((3, 0))),
        (((4, 2)), ((3, 0)), ((4, 1))),
        (((4, 3)), ((4, 1)), ((4, 2))),
        (((4, 4)), ((4, 2)), ((4, 3))),
        # L 3
        (((3, 4)), ((4, 3)), ((4, 3))),
        (((2, 4)), ((4, 3)), ((3, 4))),
        (((1, 4)), ((3, 4)), ((2, 4))),
        # D 1
        (((1, 3)), ((2, 4)), ((2, 4))),
        # R 4
        (((2, 3)), ((2, 4)), ((2, 4))),
        (((3, 3)), ((2, 4)), ((2, 4))),
        (((4, 3)), ((2, 4)), ((3, 3))),
        (((5, 3)), ((3, 3)), ((4, 3))),
        # D 1
        (((5, 2)), ((4, 3)), ((4, 3))),
        # L 5
        (((4, 2)), ((4, 3)), ((4, 3))),
        (((3, 2)), ((4, 3)), ((4, 3))),
        (((2, 2)), ((4, 3)), ((3, 2))),
        (((1, 2)), ((3, 2)), ((2, 2))),
        (((0, 2)), ((2, 2)), ((1, 2))),
        # R 2
        (((1, 2)), ((1, 2)), ((1, 2))),
        (((2, 2)), ((1, 2)), ((1, 2))),
    )
)
def test_predict(head, tail, expected):
    assert predict(head, tail) == expected
